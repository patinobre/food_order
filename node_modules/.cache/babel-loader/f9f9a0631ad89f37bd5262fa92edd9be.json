{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PATRICIACORTIZODEARG\\\\projects\\\\food_order\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\n// useReducer é semelhante ao useState, porém permite o gerenciamento de sates mais complexos\nimport { useReducer } from 'react';\nimport CartContext from './cart-context'; // constante que armazena o estado do objeto na função reducer\n// inocialmente nao temos items nem amount\n// esse valor é modificado ao serem adicionados items e valores no Cart\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n}; // constante recebe o valor da funçao reducer\n// funçao reducer deve estar fora do componente por que nao deve ser executada toda vez que o componente é rea valiado\n// a função reducer recebe 2 parâmetros,  um objeto que gerencia o stado e uma ação\n// o estado é o ultimo estado verificado pela funçao reducer\n// a açao é disparada posteriormente\n// como parte da função reducer, temos que retornar um novo estado\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedItems = state.items.concat(action.item);\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n}; // cria o componente CartProvider\n// este é o componente que gerencia as informações do Cart\n\n\nconst CartProvider = props => {\n  _s();\n\n  // constante que armazena a funçao reducer\n  // passamos como elemento do array para armazenar state o cartSate \n  // passamos como elemento do array para armazenar açao o dispatchCartAction\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState); // quando essa função é chamada, obtemos o item que deve ser adicionado ao Cart\n  // precisamos checar se o item já está no carrinho ou se é um novo item\n  // na açao dispatch encaminhamos o item que deve ser adicionado\n\n  const addItemToCartHandler = item => {\n    //açao que dispara a açao de adicionar items no cart\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  }; // quando essa função é chamada, obtemos o item que deve ser removido do Cart\n\n\n  const removeItemFromCartHandler = id => {\n    //açao que dispara a açao de remover items no cart\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  }; // o cartState é usado para construir o objeto cartContext\n  // usamos a porpriedade items e a porpriedade totalAmount para aceesar as propriedades do cartState\n\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/PATRICIACORTIZODEARG/projects/food_order/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","updatedTotalAmount","price","amount","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","id","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAGA;AACA;AACA;;;AACA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAE,EADc;AAErBC,EAAAA,WAAW,EAAE;AAFQ,CAAzB,C,CAKA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAEnC,MAAGA,MAAM,CAACC,IAAP,KAAgB,KAAnB,EAA0B;AACtB,UAAMC,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAArB;AACA,UAAMC,kBAAkB,GAAGN,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYE,KAAZ,GAAoBN,MAAM,CAACI,IAAP,CAAYG,MAA/E;AACA,WAAO;AACHX,MAAAA,KAAK,EAAEM,YADJ;AAEHL,MAAAA,WAAW,EAAEQ;AAFV,KAAP;AAIH;;AACD,SAAOV,gBAAP;AACH,CAXD,C,CAaA;AACA;;;AACA,MAAMa,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAE5B;AACA;AACA;AACA,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkClB,UAAU,CAACK,WAAD,EAAcH,gBAAd,CAAlD,CAL4B,CAO5B;AACA;AACA;;AACA,QAAMiB,oBAAoB,GAAIR,IAAD,IAAU;AAEnC;AACAO,IAAAA,kBAAkB,CAAC;AAACV,MAAAA,IAAI,EAAE,KAAP;AAAcG,MAAAA,IAAI,EAAEA;AAApB,KAAD,CAAlB;AACH,GAJD,CAV4B,CAgB5B;;;AACD,QAAMS,yBAAyB,GAAIC,EAAD,IAAQ;AAErC;AACAH,IAAAA,kBAAkB,CAAC;AAACV,MAAAA,IAAI,EAAE,QAAP;AAAiBa,MAAAA,EAAE,EAAEA;AAArB,KAAD,CAAlB;AACH,GAJF,CAjB6B,CAuB5B;AACA;;;AACA,QAAMC,WAAW,GAAG;AAChBnB,IAAAA,KAAK,EAAEc,SAAS,CAACd,KADD;AAEhBC,IAAAA,WAAW,EAAEa,SAAS,CAACb,WAFP;AAGhBmB,IAAAA,OAAO,EAAEJ,oBAHO;AAIhBK,IAAAA,UAAU,EAAEJ;AAJI,GAApB;AAOA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,WAA7B;AAAA,cACKN,KAAK,CAACS;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CArCD;;GAAMV,Y;;KAAAA,Y;AAuCN,eAAeA,YAAf","sourcesContent":["// useReducer é semelhante ao useState, porém permite o gerenciamento de sates mais complexos\r\nimport { useReducer } from 'react';\r\nimport CartContext from './cart-context';\r\n\r\n\r\n// constante que armazena o estado do objeto na função reducer\r\n// inocialmente nao temos items nem amount\r\n// esse valor é modificado ao serem adicionados items e valores no Cart\r\nconst defaultCartState = {\r\n    items: [],\r\n    totalAmount: 0\r\n};\r\n\r\n// constante recebe o valor da funçao reducer\r\n// funçao reducer deve estar fora do componente por que nao deve ser executada toda vez que o componente é rea valiado\r\n// a função reducer recebe 2 parâmetros,  um objeto que gerencia o stado e uma ação\r\n// o estado é o ultimo estado verificado pela funçao reducer\r\n// a açao é disparada posteriormente\r\n// como parte da função reducer, temos que retornar um novo estado\r\nconst cartReducer = (state, action) => {\r\n    \r\n    if(action.type === 'ADD') {\r\n        const updatedItems = state.items.concat(action.item);\r\n        const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\r\n        return {\r\n            items: updatedItems,\r\n            totalAmount: updatedTotalAmount\r\n        };\r\n    }\r\n    return defaultCartState;\r\n};\r\n\r\n// cria o componente CartProvider\r\n// este é o componente que gerencia as informações do Cart\r\nconst CartProvider = (props) => {\r\n    \r\n    // constante que armazena a funçao reducer\r\n    // passamos como elemento do array para armazenar state o cartSate \r\n    // passamos como elemento do array para armazenar açao o dispatchCartAction\r\n    const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\r\n\r\n    // quando essa função é chamada, obtemos o item que deve ser adicionado ao Cart\r\n    // precisamos checar se o item já está no carrinho ou se é um novo item\r\n    // na açao dispatch encaminhamos o item que deve ser adicionado\r\n    const addItemToCartHandler = (item) => {\r\n        \r\n        //açao que dispara a açao de adicionar items no cart\r\n        dispatchCartAction({type: 'ADD', item: item});\r\n    };\r\n    \r\n    // quando essa função é chamada, obtemos o item que deve ser removido do Cart\r\n   const removeItemFromCartHandler = (id) => {\r\n        \r\n        //açao que dispara a açao de remover items no cart\r\n        dispatchCartAction({type: 'REMOVE', id: id});\r\n    };\r\n    \r\n    // o cartState é usado para construir o objeto cartContext\r\n    // usamos a porpriedade items e a porpriedade totalAmount para aceesar as propriedades do cartState\r\n    const cartContext = {\r\n        items: cartState.items,\r\n        totalAmount: cartState.totalAmount,\r\n        addItem: addItemToCartHandler,\r\n        removeItem: removeItemFromCartHandler\r\n    };\r\n\r\n    return(\r\n        <CartContext.Provider value={cartContext}>\r\n            {props.children}\r\n        </CartContext.Provider>\r\n    );\r\n};\r\n\r\nexport default CartProvider;"]},"metadata":{},"sourceType":"module"}