{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PATRICIACORTIZODEARG\\\\projects\\\\food_order\\\\src\\\\components\\\\Meals\\\\MealItem\\\\MealItemForm.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport Input from '../../UI/Input';\nimport classes from './MealItemForm.module.css'; //cria o componente MealItemForm\n// é daqui que chamamos a constante addItemToCartHandler que está no componente CartProvider\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MealItemForm = props => {\n  _s();\n\n  // useState é usado para controlar quando o formulário é válido ou não\n  // inicialmente o state é true\n  // extraimos os valores de useState atraves do array com 2 elementos, uma constante que armazena o state e uma funçao que manipula o novo state\n  const [amountIsValid, setAmountIsValid] = useState(true); // usamos refs no componente Input para extrair o amount que foi imputado\n  // no componente input, passamos o ref para a prop ref\n  // mas como é um componente customizado, precisamos ir até o compunente customizado input e importar o react\n  // e ter a funçao do componente através do React.forwardRef\n  // e passar como parametro da funcao React.forwardRef props e ref\n  // precisamos também setar a prop ref no <input ref ={ref}>\n  // só assim podemos ter acesso ao input atraves de refs\n  // e ler o valor imputado na função submitHandler\n\n  const amountInputRef = useRef(); // dessa função obtemos o evento que é passado como parametro pelo onSubmite que fica no form\n\n  const submitHandler = event => {\n    // chamamos o event.preventDefault para evitar que o browser automaticamente recarregue a página\n    event.preventDefault(); // enteredAmount armazena o valor imputado usando ref\n    // como padrao o valor é uma string\n\n    const enteredAmount = amountInputRef.current.value; // força o valor a se tornar numero\n\n    const enteredAmountNumber = +enteredAmount; // validações\n    // verifica se nenhum texto foi imputado ou se o número é menor que 1 ou maior que 5\n\n    if (enteredAmount.trim().length === 0 || enteredAmountNumber < 1 || enteredAmountNumber > 5) {\n      // define o setAmountIsValid como false ao encontrar alguma das condiçoes acima\n      setAmountIsValid(false); // se alguma das condiçoes acima forem encontradas, o processamento da função é parado\n      // podemos adicionar uma mensagem de erro e para isso temos que manipular o state usando o useState\n\n      return;\n    } // passa através de props uma função\n\n\n    props.onAddToCart(enteredAmountNumber);\n  }; // retorna o HTML e o JSX se o conteudo impputado passou pels validaçoes acima\n\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      ref: amountInputRef,\n      label: \"Amount\",\n      input: {\n        id: 'amount_' + props.id,\n        type: 'number',\n        min: '1',\n        max: '5',\n        step: '1',\n        defaultValue: '1'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"+ Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), // conteudo renderizado condicionalmente\n    !amountIsValid && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please enter a valid amount (1-5).\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MealItemForm, \"49LGRK4jBiAcXkiYfsTkxzkpjmw=\");\n\n_c = MealItemForm;\nexport default MealItemForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MealItemForm\");","map":{"version":3,"sources":["C:/Users/PATRICIACORTIZODEARG/projects/food_order/src/components/Meals/MealItem/MealItemForm.js"],"names":["useRef","useState","Input","classes","MealItemForm","props","amountIsValid","setAmountIsValid","amountInputRef","submitHandler","event","preventDefault","enteredAmount","current","value","enteredAmountNumber","trim","length","onAddToCart","form","id","type","min","max","step","defaultValue"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CAEA;AACA;;;;AACA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAE5B;AACA;AACA;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,IAAD,CAAlD,CAL4B,CAO5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMO,cAAc,GAAGR,MAAM,EAA7B,CAf4B,CAiB5B;;AACA,QAAMS,aAAa,GAAGC,KAAK,IAAI;AAC3B;AACAA,IAAAA,KAAK,CAACC,cAAN,GAF2B,CAI3B;AACA;;AACA,UAAMC,aAAa,GAAGJ,cAAc,CAACK,OAAf,CAAuBC,KAA7C,CAN2B,CAQ3B;;AACA,UAAMC,mBAAmB,GAAG,CAACH,aAA7B,CAT2B,CAW3B;AACA;;AACA,QACIA,aAAa,CAACI,IAAd,GAAqBC,MAArB,KAAgC,CAAhC,IACAF,mBAAmB,GAAG,CADtB,IAEAA,mBAAmB,GAAG,CAH1B,EAIE;AACE;AACAR,MAAAA,gBAAgB,CAAC,KAAD,CAAhB,CAFF,CAIE;AACA;;AACA;AACH,KAxB0B,CA0B3B;;;AACAF,IAAAA,KAAK,CAACa,WAAN,CAAkBH,mBAAlB;AACH,GA5BD,CAlB4B,CAgD5B;;;AACA,sBACI;AAAM,IAAA,SAAS,EAAEZ,OAAO,CAACgB,IAAzB;AAA+B,IAAA,QAAQ,EAAEV,aAAzC;AAAA,4BACI,QAAC,KAAD;AACI,MAAA,GAAG,EAAED,cADT;AAEI,MAAA,KAAK,EAAC,QAFV;AAGI,MAAA,KAAK,EAAE;AACPY,QAAAA,EAAE,EAAE,YAAYf,KAAK,CAACe,EADf;AAEPC,QAAAA,IAAI,EAAE,QAFC;AAGPC,QAAAA,GAAG,EAAE,GAHE;AAIPC,QAAAA,GAAG,EAAE,GAJE;AAKPC,QAAAA,IAAI,EAAE,GALC;AAMPC,QAAAA,YAAY,EAAE;AANP;AAHX;AAAA;AAAA;AAAA;AAAA,YADJ,eAaI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbJ,EAeI;AACA,KAAEnB,aAAF,iBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBvB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CArED;;GAAMF,Y;;KAAAA,Y;AAuEN,eAAeA,YAAf","sourcesContent":["import { useRef, useState } from 'react';\nimport Input from '../../UI/Input';\nimport classes from './MealItemForm.module.css';\n\n//cria o componente MealItemForm\n// é daqui que chamamos a constante addItemToCartHandler que está no componente CartProvider\nconst MealItemForm = (props) => {\n    \n    // useState é usado para controlar quando o formulário é válido ou não\n    // inicialmente o state é true\n    // extraimos os valores de useState atraves do array com 2 elementos, uma constante que armazena o state e uma funçao que manipula o novo state\n    const [amountIsValid, setAmountIsValid] = useState(true);\n    \n    // usamos refs no componente Input para extrair o amount que foi imputado\n    // no componente input, passamos o ref para a prop ref\n    // mas como é um componente customizado, precisamos ir até o compunente customizado input e importar o react\n    // e ter a funçao do componente através do React.forwardRef\n    // e passar como parametro da funcao React.forwardRef props e ref\n    // precisamos também setar a prop ref no <input ref ={ref}>\n    // só assim podemos ter acesso ao input atraves de refs\n    // e ler o valor imputado na função submitHandler\n    const amountInputRef = useRef();\n    \n    // dessa função obtemos o evento que é passado como parametro pelo onSubmite que fica no form\n    const submitHandler = event => {\n        // chamamos o event.preventDefault para evitar que o browser automaticamente recarregue a página\n        event.preventDefault();\n        \n        // enteredAmount armazena o valor imputado usando ref\n        // como padrao o valor é uma string\n        const enteredAmount = amountInputRef.current.value;\n        \n        // força o valor a se tornar numero\n        const enteredAmountNumber = +enteredAmount;\n\n        // validações\n        // verifica se nenhum texto foi imputado ou se o número é menor que 1 ou maior que 5\n        if (\n            enteredAmount.trim().length === 0 || \n            enteredAmountNumber < 1 || \n            enteredAmountNumber > 5\n        ) {\n            // define o setAmountIsValid como false ao encontrar alguma das condiçoes acima\n            setAmountIsValid(false);\n            \n            // se alguma das condiçoes acima forem encontradas, o processamento da função é parado\n            // podemos adicionar uma mensagem de erro e para isso temos que manipular o state usando o useState\n            return;\n        }\n\n        // passa através de props uma função\n        props.onAddToCart(enteredAmountNumber);\n    };\n\n    // retorna o HTML e o JSX se o conteudo impputado passou pels validaçoes acima\n    return(\n        <form className={classes.form} onSubmit={submitHandler} >\n            <Input \n                ref={amountInputRef}\n                label=\"Amount\" \n                input={{\n                id: 'amount_' + props.id,\n                type: 'number',\n                min: '1',\n                max: '5',\n                step: '1',\n                defaultValue: '1'\n            }}\n            />\n            <button>+ Add</button>\n            {\n            // conteudo renderizado condicionalmente\n            ! amountIsValid && <p>Please enter a valid amount (1-5).</p> }\n        </form>\n    );\n};\n\nexport default MealItemForm;"]},"metadata":{},"sourceType":"module"}